# Docker Compose for Collaborative Document Platform
version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: collab-doc-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/collaborative_docs_dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRE=7d
      - CLIENT_URL=http://localhost:3000
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - collab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB service
  mongodb:
    image: mongo:6.0
    container_name: collab-doc-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=collaborative_docs_dev
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - collab-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis service for caching and session management
  redis:
    image: redis:7-alpine
    container_name: collab-doc-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - collab-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Express for database management (development only)
  mongo-express:
    image: mongo-express:latest
    container_name: collab-doc-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password123
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password123@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - collab-network
    profiles:
      - tools

  # Redis Commander for Redis management (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: collab-doc-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - collab-network
    profiles:
      - tools

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: collab-doc-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - collab-network
    profiles:
      - proxy

# Named volumes for data persistence
volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-uploads:
    driver: local

# Custom network for service communication
networks:
  collab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
